name: Deploy Website with Zero Downtime

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Check Current Active Port
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Set the specific website configuration file path
            NGINX_CONFIG="/etc/nginx/sites-available/empowertech.be"
            echo "Using Nginx config: $NGINX_CONFIG"
            
            # Check which port is currently active by examining the Nginx config
            if grep -q "server localhost:4000;" "$NGINX_CONFIG" && ! grep -q "server localhost:4000 backup;" "$NGINX_CONFIG"; then
              echo "PORT_ACTIVE=4000" > ~/website_port_state.env
              echo "PORT_NEW=4001" >> ~/website_port_state.env
            else
              echo "PORT_ACTIVE=4001" > ~/website_port_state.env
              echo "PORT_NEW=4000" >> ~/website_port_state.env
            fi

      - name: Deploy to VPS
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".,!node_modules,!.git"
          target: "/home/${{ secrets.USERNAME }}/website-new"
          strip_components: 0
          overwrite: true

      - name: Build and Start New Container
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@master
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          DEVELOPER_API_URL: ${{ secrets.DEVELOPER_API_URL }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          FROM_EMAIL: ${{ secrets.FROM_EMAIL }}
          TO_EMAIL: ${{ secrets.TO_EMAIL }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: NEXT_PUBLIC_API_URL,DEVELOPER_API_URL,RESEND_API_KEY,FROM_EMAIL,TO_EMAIL
          script: |
            cd ~/website-new
            
            # Create env file with proper quotes
            echo "NEXT_PUBLIC_API_URL='$NEXT_PUBLIC_API_URL'" > .env
            echo "DEVELOPER_API_URL='$DEVELOPER_API_URL'" >> .env
            echo "RESEND_API_KEY='$RESEND_API_KEY'" >> .env
            echo "FROM_EMAIL='$FROM_EMAIL'" >> .env
            echo "TO_EMAIL='$TO_EMAIL'" >> .env
            chmod 600 .env
            
            # Set the specific website configuration file path
            NGINX_CONFIG="/etc/nginx/sites-available/empowertech.be"
            echo "Using Nginx config: $NGINX_CONFIG"
            
            # Backup the Nginx config before making changes
            sudo cp "$NGINX_CONFIG" "$NGINX_CONFIG.bak"
            
            # Source the port state environment file
            source ~/website_port_state.env
            echo "Building new container on port $PORT_NEW"
            
            # Build new container with the appropriate name and port
            export CONTAINER_NAME=nextjs_website_${PORT_NEW}
            export PORT=${PORT_NEW}
            
            # Build and start the new container
            docker compose build --no-cache
            docker compose up -d
            
            # Wait for container to be healthy
            echo "Waiting for new container to be ready on port ${PORT_NEW}..."
            attempt=0
            max_attempts=30
            
            until $(curl --output /dev/null --silent --head --fail http://localhost:${PORT_NEW}); do
              if [ ${attempt} -eq ${max_attempts} ]; then
                echo "New container failed to start properly. Rolling back."
                export CONTAINER_NAME=nextjs_website_${PORT_NEW} 
                export PORT=${PORT_NEW}
                docker compose down
                exit 1
              fi
            
              printf '.'
              attempt=$(($attempt+1))
              sleep 2
            done
            
            echo "New container is ready. Updating Nginx to route traffic."
            
            # Make sure we preserve the upstream block structure
            echo "Updating Nginx configuration..."
            
            # First ensure both server lines exist (uncommented)
            if grep -q "# server localhost:${PORT_NEW}" "$NGINX_CONFIG"; then
              sudo sed -i "s/# server localhost:${PORT_NEW}/server localhost:${PORT_NEW}/g" "$NGINX_CONFIG"
            fi
            
            # Ensure the active server becomes backup and the new server becomes active
            sudo sed -i "s/server localhost:${PORT_ACTIVE};/server localhost:${PORT_ACTIVE} backup;/g" "$NGINX_CONFIG"
            sudo sed -i "s/server localhost:${PORT_NEW} backup;/server localhost:${PORT_NEW};/g" "$NGINX_CONFIG"
            # If the new server doesn't have the backup flag, also handle that case
            sudo sed -i "s/server localhost:${PORT_NEW};/server localhost:${PORT_NEW};/g" "$NGINX_CONFIG"
            
            # Test Nginx configuration before reload
            echo "Testing Nginx configuration..."
            if sudo nginx -t; then
              echo "Nginx configuration test passed. Reloading..."
              sudo systemctl reload nginx
              echo "Nginx updated successfully. New version is live."
            else
              echo "Nginx configuration error! Rolling back changes..."
              sudo cp "$NGINX_CONFIG.bak" "$NGINX_CONFIG"
              sudo nginx -t && sudo systemctl reload nginx
            
              # Stop new container since we're keeping the old one
              echo "Stopping newly created container..."
              export CONTAINER_NAME=nextjs_website_${PORT_NEW}
              export PORT=${PORT_NEW}
              docker compose down
              exit 1
            fi
            
            sleep 5
            
            # Stop the old container after a grace period
            echo "Stopping old container on port ${PORT_ACTIVE}..."
            cd ~/website
            export CONTAINER_NAME=nextjs_website_${PORT_ACTIVE}
            export PORT=${PORT_ACTIVE}
            docker compose down
            
            # Clean up after successful deployment
            mkdir -p ~/website-backup
            rm -rf ~/website-backup/* # Clear previous backup
            cp -r ~/website/* ~/website-backup/ 2>/dev/null || true
            rm -rf ~/website/* # Clear website directory
            cp -r ~/website-new/* ~/website/ 2>/dev/null || true
            rm -rf ~/website-new/* # Clear website-new directory
            
            # Cleanup
            docker system prune -f --volumes
            docker image prune -f
            docker builder prune -f --keep-storage 8GB